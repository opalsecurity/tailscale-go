/*
Tailscale API

Tailscale API spec

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// ACLRule struct for ACLRule
type ACLRule struct {
	Action *string `json:"action,omitempty"`
	Src []string `json:"src,omitempty"`
	Dst []string `json:"dst,omitempty"`
}

// NewACLRule instantiates a new ACLRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLRule() *ACLRule {
	this := ACLRule{}
	return &this
}

// NewACLRuleWithDefaults instantiates a new ACLRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLRuleWithDefaults() *ACLRule {
	this := ACLRule{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ACLRule) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ACLRule) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ACLRule) SetAction(v string) {
	o.Action = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *ACLRule) GetSrc() []string {
	if o == nil || o.Src == nil {
		var ret []string
		return ret
	}
	return o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetSrcOk() ([]string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *ACLRule) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given []string and assigns it to the Src field.
func (o *ACLRule) SetSrc(v []string) {
	o.Src = v
}

// GetDst returns the Dst field value if set, zero value otherwise.
func (o *ACLRule) GetDst() []string {
	if o == nil || o.Dst == nil {
		var ret []string
		return ret
	}
	return o.Dst
}

// GetDstOk returns a tuple with the Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLRule) GetDstOk() ([]string, bool) {
	if o == nil || o.Dst == nil {
		return nil, false
	}
	return o.Dst, true
}

// HasDst returns a boolean if a field has been set.
func (o *ACLRule) HasDst() bool {
	if o != nil && o.Dst != nil {
		return true
	}

	return false
}

// SetDst gets a reference to the given []string and assigns it to the Dst field.
func (o *ACLRule) SetDst(v []string) {
	o.Dst = v
}

func (o ACLRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Dst != nil {
		toSerialize["dst"] = o.Dst
	}
	return json.Marshal(toSerialize)
}

type NullableACLRule struct {
	value *ACLRule
	isSet bool
}

func (v NullableACLRule) Get() *ACLRule {
	return v.value
}

func (v *NullableACLRule) Set(val *ACLRule) {
	v.value = val
	v.isSet = true
}

func (v NullableACLRule) IsSet() bool {
	return v.isSet
}

func (v *NullableACLRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLRule(val *ACLRule) *NullableACLRule {
	return &NullableACLRule{value: val, isSet: true}
}

func (v NullableACLRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


