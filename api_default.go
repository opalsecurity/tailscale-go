/*
Tailscale API

Tailscale API spec

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiTailnetTailnetNameAclGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	tailnetName string
}

func (r ApiTailnetTailnetNameAclGetRequest) Execute() (*TailnetACL, *http.Response, error) {
	return r.ApiService.TailnetTailnetNameAclGetExecute(r)
}

/*
TailnetTailnetNameAclGet Method for TailnetTailnetNameAclGet

Retrieves the ACL that is currently set for the given tailnet. Supply the tailnet of interest in the path. This endpoint can send back either the HuJSON of the ACL or a parsed JSON, depending on the Accept header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tailnetName The name of the Tailnet
 @return ApiTailnetTailnetNameAclGetRequest
*/
func (a *DefaultApiService) TailnetTailnetNameAclGet(ctx context.Context, tailnetName string) ApiTailnetTailnetNameAclGetRequest {
	return ApiTailnetTailnetNameAclGetRequest{
		ApiService: a,
		ctx: ctx,
		tailnetName: tailnetName,
	}
}

// Execute executes the request
//  @return TailnetACL
func (a *DefaultApiService) TailnetTailnetNameAclGetExecute(r ApiTailnetTailnetNameAclGetRequest) (*TailnetACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TailnetACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.TailnetTailnetNameAclGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tailnet/{tailnet_name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"tailnet_name"+"}", url.PathEscape(parameterToString(r.tailnetName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTailnetTailnetNameAclPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	tailnetName string
	ifMatch *string
	tailnetACL *TailnetACL
}

// Set this value to the ETag header provided in an ACL GET request to avoid missed updates.
func (r ApiTailnetTailnetNameAclPostRequest) IfMatch(ifMatch string) ApiTailnetTailnetNameAclPostRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiTailnetTailnetNameAclPostRequest) TailnetACL(tailnetACL TailnetACL) ApiTailnetTailnetNameAclPostRequest {
	r.tailnetACL = &tailnetACL
	return r
}

func (r ApiTailnetTailnetNameAclPostRequest) Execute() (*TailnetACL, *http.Response, error) {
	return r.ApiService.TailnetTailnetNameAclPostExecute(r)
}

/*
TailnetTailnetNameAclPost Method for TailnetTailnetNameAclPost

Sets the ACL for the given domain. HuJSON and JSON are both accepted inputs. An If-Match header can be set to avoid missed updates.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tailnetName The name of the Tailnet
 @return ApiTailnetTailnetNameAclPostRequest
*/
func (a *DefaultApiService) TailnetTailnetNameAclPost(ctx context.Context, tailnetName string) ApiTailnetTailnetNameAclPostRequest {
	return ApiTailnetTailnetNameAclPostRequest{
		ApiService: a,
		ctx: ctx,
		tailnetName: tailnetName,
	}
}

// Execute executes the request
//  @return TailnetACL
func (a *DefaultApiService) TailnetTailnetNameAclPostExecute(r ApiTailnetTailnetNameAclPostRequest) (*TailnetACL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TailnetACL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.TailnetTailnetNameAclPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tailnet/{tailnet_name}/acl"
	localVarPath = strings.Replace(localVarPath, "{"+"tailnet_name"+"}", url.PathEscape(parameterToString(r.tailnetName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	// body params
	localVarPostBody = r.tailnetACL
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
