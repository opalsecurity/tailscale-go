/*
Tailscale API

Tailscale API spec

API version: 1.0
Contact: hello@opal.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opal

import (
	"encoding/json"
)

// Test struct for Test
type Test struct {
	Src *string `json:"src,omitempty"`
	Accept []string `json:"accept,omitempty"`
	Deny []string `json:"deny,omitempty"`
}

// NewTest instantiates a new Test object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTest() *Test {
	this := Test{}
	return &this
}

// NewTestWithDefaults instantiates a new Test object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestWithDefaults() *Test {
	this := Test{}
	return &this
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *Test) GetSrc() string {
	if o == nil || o.Src == nil {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test) GetSrcOk() (*string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *Test) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *Test) SetSrc(v string) {
	o.Src = &v
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *Test) GetAccept() []string {
	if o == nil || o.Accept == nil {
		var ret []string
		return ret
	}
	return o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test) GetAcceptOk() ([]string, bool) {
	if o == nil || o.Accept == nil {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *Test) HasAccept() bool {
	if o != nil && o.Accept != nil {
		return true
	}

	return false
}

// SetAccept gets a reference to the given []string and assigns it to the Accept field.
func (o *Test) SetAccept(v []string) {
	o.Accept = v
}

// GetDeny returns the Deny field value if set, zero value otherwise.
func (o *Test) GetDeny() []string {
	if o == nil || o.Deny == nil {
		var ret []string
		return ret
	}
	return o.Deny
}

// GetDenyOk returns a tuple with the Deny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test) GetDenyOk() ([]string, bool) {
	if o == nil || o.Deny == nil {
		return nil, false
	}
	return o.Deny, true
}

// HasDeny returns a boolean if a field has been set.
func (o *Test) HasDeny() bool {
	if o != nil && o.Deny != nil {
		return true
	}

	return false
}

// SetDeny gets a reference to the given []string and assigns it to the Deny field.
func (o *Test) SetDeny(v []string) {
	o.Deny = v
}

func (o Test) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Accept != nil {
		toSerialize["accept"] = o.Accept
	}
	if o.Deny != nil {
		toSerialize["deny"] = o.Deny
	}
	return json.Marshal(toSerialize)
}

type NullableTest struct {
	value *Test
	isSet bool
}

func (v NullableTest) Get() *Test {
	return v.value
}

func (v *NullableTest) Set(val *Test) {
	v.value = val
	v.isSet = true
}

func (v NullableTest) IsSet() bool {
	return v.isSet
}

func (v *NullableTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTest(val *Test) *NullableTest {
	return &NullableTest{value: val, isSet: true}
}

func (v NullableTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


